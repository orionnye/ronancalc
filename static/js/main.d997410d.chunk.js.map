{"version":3,"sources":["useGlobal.js","math.js","DataPanel.js","Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["observers","window","Map","useGlobal","defaultValue","name","value","useState","setReactValue","listeners","get","Set","set","useEffect","add","delete","setValue","newValue","listener","Vector","x","y","this","that","Math","sqrt","sign","normalizingScale","length","scale","GenerateSymbol","props","radix","color","center","fullCircle","PI","radianScale","rotation","pointStore","tickCount","i","sin","cos","point","parseInt","getSymbols","radVal","toString","symbols","push","number","symbol","className","alt","src","calcToSymbols","calc","chunks","split","statements","forEach","unit","isNaN","DataPanel","setRadix","arabic","setArabic","type","onChange","e","target","checked","Button","minWidth","ceil","style","fontSize","onClick","handleClick","alterCalc","text","base","radixText","chunk","parseFloat","getDisplay","texts","displays","map","index","visibleRune","Calculator","display","setDisplay","view","document","getElementById","scrollTop","scrollHeight","operations","op","list","slice","last","pop","total","ops","runningTotal","lastSign","console","log","calculate","numbers","buttons","line","substring","numberPress","id","Banner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d997410d.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\"\n\nlet observers = window.observers = new Map();\n\nexport default function useGlobal(defaultValue, name = \"state\") {\n    \n    let value = window[name] = window[name] ?? defaultValue;\n\n    let [reactValue, setReactValue] = useState(value);\n\n    // get observers of this named state\n    let listeners = observers.get(name);\n    //  create new set if first time\n    if (listeners == null) {\n        listeners = new Set();\n        observers.set(name, listeners);\n    }\n\n    useEffect(() => {\n        // add ourselves to listeners\n        listeners.add(setReactValue);\n        // return function called by react when this calling component is destroyed (or re-rendered)\n        return () => {\n            // remove ourselves from listeners\n            listeners.delete(setReactValue);\n        }\n    })\n\n    let setValue = (newValue) => {\n        window[name] = newValue;\n        for (let listener of listeners) {\n            listener(newValue);\n        }\n    }\n\n    return [value, setValue];\n}","export default class Vector {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    subtract(that) {\n        return new Vector(this.x-that.x, this.y-that.y)\n    }\n    add(that) {\n        return new Vector(this.x+that.x, this.y+that.y);\n    }\n    get length() {\n        let {x, y} = this\n        return (Math.sqrt(x*x + y*y))\n    }\n    get signs() {\n        let {x, y} = this;\n        return new Vector(Math.sign(x), Math.sign(y));\n    }\n    get normal() {\n        let normalizingScale = 1 / this.length\n        return this.scale(normalizingScale)\n    }\n    cross(that) {\n        return new Vector(this.x * that.x, this.y * that.y)\n    }\n    scale(that) {\n        return new Vector(this.x*that, this.y*that)\n    }\n}","import './App.css';\nimport './DataPanel.css';\nimport Vector from './math.js';\nimport React from 'react';\nimport useGlobal from './useGlobal.js';\n\nexport function GenerateSymbol(props) {\n    let {value, radix, color = \"orange\"} = props;\n    let scale = 10;\n    let girth = 1;\n    let center = new Vector(scale + girth, scale + girth);\n    let fullCircle = -Math.PI * 2;\n    let radianScale = fullCircle / radix;\n    let rotation = fullCircle / radix / 2;\n    let pointStore = \"\";\n\n    let tickCount = value % radix === 0 ? radix : value % radix;\n    for (let i = 0; i <= tickCount; i++) {\n        let x = Math.sin(radianScale * i + rotation);\n        let y = Math.cos(radianScale * i + rotation);\n        let point = center.add(new Vector(x, y).scale(scale));\n        pointStore = pointStore + point.x + \" \" + point.y + \" \";\n        if (i === parseInt(radix)) {\n            pointStore = pointStore + 0 + \" \" + point.y;\n        }\n    }\n    let url = `data:image/svg+xml;utf8,\n    <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"-4 -5 30 30\" xml:space=\"preserve\">\n        <g>\n            <polyline points=\"${pointStore}\" stroke=\"${color}\" fill=\"transparent\" strokeWidth=\"${girth}\"/>\n        </g>\n    </svg>`\n    // console.log(url);\n    return url\n}\n\nexport function getSymbols(value, radix, color = \"black\") {\n    let radVal = value.toString();\n    // console.log(radVal);\n    let symbols = [];\n    if (radVal < 0) {\n        symbols.push(\"-\");\n    }\n    for (let i = 0; i < radVal.length; i++) {\n        let number = parseInt(radVal[i], radix);\n        let symbol = <div key={value + \"#: \" + i} className=\"symbolBox\">\n            <img alt=\"broken\" src={GenerateSymbol({value: number, radix, color})} />\n        </div>\n        symbols.push(symbol);\n    }\n    return symbols;\n}\nexport function calcToSymbols(calc, radix, color = \"black\") {\n    let chunks = calc.split(\" \");\n    let statements = [];\n    statements.push(<div key={\"fillStart: \" + calc} className=\"fillBox\" />);\n    chunks.forEach(unit => {\n        if (isNaN(parseInt(unit, radix))) {\n            statements.push(unit);\n        } else {\n            statements.push(getSymbols(unit, radix, color));\n        }\n    });\n    //after centering div\n    statements.push(<div key={\"fillEnd: \" + calc} className=\"fillBox\" />);\n    return <div key={calc} className=\"symbolRow\">\n        {statements}\n    </div>\n}\n//symbol box class?\n\nexport default function DataPanel() {\n    const [radix, setRadix] = useGlobal(11, \"radix\");\n    const [arabic, setArabic] = useGlobal(false, \"arabic\");\n    let floor = 2;\n    let ceiling = 36;\n\n    return (\n        <div className=\"dataTap\">\n            <img className=\"radixDisplay\" alt=\"broken\" src={GenerateSymbol({value:0, radix, color:\"orange\"})} />\n            <div className=\"inputBar\">\n                <div className=\"radixLabel\">\n                    Radix:\n                    <input\n                        className=\"ronanInput\"\n                        type=\"number\"\n                        defaultValue={radix}\n                        onChange={(e) => { \n                            if (e.target.value < floor) {\n                                e.target.value = floor;\n                            } else if (e.target.value > ceiling) {\n                                e.target.value = ceiling;\n                            }\n                            setRadix(e.target.value);\n                        }}\n                    />\n                </div>\n                <div className=\"radixLabel\">\n                    Western Arabic:\n                    <input\n                        className=\"systemBox\"\n                        type=\"checkbox\"\n                        checked = {arabic}\n                        onChange={(e) => {\n                            setArabic(e.target.checked);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}","import './Calculator.css';\nimport './App.css';\nimport './DataPanel.css';\nimport React, { useEffect, useState } from 'react';\nimport useGlobal from './useGlobal';\nimport { calcToSymbols, getSymbols } from './DataPanel.js';\n\nfunction Button(props) {\n    const value = props.value;\n    const radix = props.radix;\n    const minWidth = 70 / Math.ceil(Math.sqrt(radix)) + \"%\";\n    return (\n        <button\n            className=\"numberButton\"\n            style={{minWidth: minWidth, fontSize: \"4vmin\"}}\n            onClick={props.handleClick}\n        >\n            {value}\n        </button>\n    );\n}\n \nfunction calculate(ops) {\n    let runningTotal = 0;\n    let lastSign = \"+\";\n    for (let i = 0; i < ops.length; i++) {\n        let value = ops[i];\n        console.log(value, runningTotal)\n        //check if NaN\n        if (isNaN(parseFloat(value))) {\n            lastSign = value;\n        } else {\n            value = parseFloat(ops[i]);\n            if (lastSign === \"/\") {\n                runningTotal = runningTotal / value;\n            } else if (lastSign === \"*\") {\n                runningTotal = runningTotal * value;\n            } else if (lastSign === \"-\") {\n                runningTotal = runningTotal - value;\n            } else if (lastSign === \"+\") {\n                runningTotal = runningTotal + value;\n            }\n        }\n        //perform previous operation with current value and running total\n    }\n    return runningTotal.toString();\n}\n\nfunction numberPress(text, base, number) {\n    //make a copy of the text\n    let line = text.slice(0);\n    //split copy and check last value\n    let hunks = line.split(\" \");\n    let last = hunks.pop();\n    //if last value is NaN then return text + number\n    if (isNaN(parseFloat(last))) {\n        return (text + number.toString())\n    }\n    //else last value is number\n    //remove it from the text\n    let newLine = line.substring(0, line.length - last.length);\n    //parse it into a number, multiply it by the base and add number\n    let lastNumber = (parseFloat(last) * base) + number;\n    //place it back onto the text and return it\n    return (newLine + lastNumber.toString());\n}\nfunction alterCalc(text, base) {\n    let radixText = \"\";\n    //store a split on text\n    let chunks = text.split(\" \");\n    //go through characters and check each for isNaN\n    chunks.forEach(chunk => {\n        //if isNaN, push onto returnText\n        if (isNaN(parseFloat(chunk))) {\n            radixText += \" \" + chunk + \" \";\n        } else {\n            //else parseFloat(Chars).toString(base) and push onto returnText \n            radixText += parseFloat(chunk).toString(base);\n        }\n    });\n    //return alteredCalc\n    return radixText\n}\n\nfunction getDisplay(texts, radix, arabic = false) {\n    let displays = texts.map((text, index) => {\n        let visibleRune = arabic ? alterCalc(text, radix) : calcToSymbols(alterCalc(text, radix), radix, \"orange\");\n        let box = \n        <div key={\"display:\" + index} className=\"displayRow\">\n            {visibleRune}\n        </div>;\n        return box\n    });\n    return displays\n}\n//migrate inner functions to outside\nexport default function Calculator() {\n    const [display, setDisplay] = useState([\"5 + 5 = \", \"10\"]);\n    const [radix] = useGlobal(4, \"radix\");\n    const [arabic] = useGlobal(true, \"arabic\");\n\n    useEffect(() => {\n        let view = document.getElementById(\"display\");\n        view.scrollTop = view.scrollHeight;\n    });\n\n    // add operations next\n    let signs = [ \" / \", \" * \", \" - \", \" + \" ];\n    let operations = signs.map(op => {\n        //default operation buttons\n        return <Button\n            key={op}\n            value={op}\n            handleClick={() => {\n                let list = display.slice(0);\n                list[list.length - 1] += op;\n                setDisplay(list)\n            }}\n        />\n    });\n    //Calculation button( yah know the big selling point)\n    operations.push(\n        <Button\n            key={\" =\"}\n            value={\" =\"}\n            handleClick={() => {\n                let list = display.slice(0);\n                let last = list.pop();\n                let total = calculate(last.split(\" \"));\n                last += \" = \" + total;\n                list.push(last);\n                list.push(total);\n                setDisplay(list);\n            }}\n        />\n    );\n    //the clear line button\n    operations.push(\n        <Button\n            key={\"c\"}\n            value={\"c\"}\n            handleClick={() => {\n                let list = display.slice(0);\n                let last = list.pop();\n                last += \" c\";\n                list.push(last);\n                list.push(\"0\");\n                setDisplay(list);\n            }}\n        />\n    );\n\n    //numbers\n    let numbers = [];\n    for (let i = 1; i < radix; i++) {\n        numbers.push(i.toString(radix));\n    }\n    numbers.push(0);\n    let buttons = numbers.map(number => {\n        return <Button\n            value={arabic ? number : getSymbols(number, radix, \"orange\")}\n            radix={radix}\n            key={\"#\" + number}\n            handleClick={() => {\n                let list = display.slice(0);\n                // console.log(list);\n                let currentDisplay = list.pop();\n                let last = numberPress(currentDisplay, radix, parseInt(number, radix));\n                list.push(last);\n                setDisplay(list);\n            }}\n        />\n    });\n    return (\n        <div className=\"calculator\" key=\"parent\">\n            <div id=\"display\" className=\"display\" key=\"display\">\n                {/* having this empty div here helps invert items and keep scroll at bottom */}\n                <div className=\"calcScroll\">\n                    {getDisplay(display, radix, arabic)}\n                </div>\n            </div>\n            <div className=\"calcRow\">\n                <div className=\"numPad\">\n                    {buttons}\n                </div>\n                <div className=\"operationPad\">\n                    {operations}\n                </div>\n            </div>\n        </div>\n    );\n}","import './App.css';\nimport Calculator from './Calculator.js';\nimport DataPanel from './DataPanel.js';\n\nfunction Banner() {\n  let acronym = \"RoNaN System\";\n  let word = \"Radial-open, Not a Number System\";\n  return (\n    <div className=\"banner\">\n      <div className=\"acronym\">\n        {acronym}\n        <br></br>\n      </div>\n        {word}\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Banner />\n        <div className=\"row\">\n          <DataPanel />\n          <Calculator />\n        </div>\n        <text>\n          RoNaN recommended radix range(oooh alliteration) is between 3-8, and 12 if you think of a clock.\n        </text>\n        <br/>\n        <text>\n          This is just a calculator to help me test my wacky number system, Pay no attention to the wonky CSS behind the curtain.\n        </text>\n        <p>\n          Designed and Developed by Orion Nye\n        </p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}